Version - 1:

LandRegistry.sol:

pragma solidity ^0.8.0;
import "./Ownable.sol";
contract LandRegistry is Ownable
{
    string private _surveyNo;
    string private _street;
    string private _area;
    string private _cityTown;
    string private _state;
    string private _pin;
    string private _country;
    string private _region;
    constructor(string memory surveyNo, string memory street, string memory area, string memory cityTown, string memory state, string memory pin, string memory country, string memory region)
    {
        _surveyNo = surveyNo;
        _street = street;
        _area = area;
        _cityTown = cityTown;
        _state = state;
        _pin = pin;
        _country = country;
        _region = region;
    }
    function surveyNo() public view returns(string memory){
        return _surveyNo;
    }
    function street() public view returns(string memory){
        return _street;
    }
    function area() public view returns(string memory){
        return _area;
    }
    function cityTown() public view returns(string memory){
        return _cityTown;
    }
    function state() public view returns(string memory){
        return _state;
    }
    function pin() public view returns(string memory){
        return _pin;
    }
    function country() public view returns(string memory){
        return _country;
    }
    function region() public view returns(string memory){
        return _region;
    }
}

GSN/Context.sol

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

Ownable.sol

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../GSN/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;
    address private _previousowner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }
function previousowner() public view virtual returns (address) {
        return _previousowner;
    }
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _previousowner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


Version - 2:

LandRegistry.sol

pragma solidity ^0.8.0;
import "../GSN/Context.sol";
contract LandRegistry is Context
{
    string private _surveyNo;
    string private _street;
    string private _area;
    string private _cityTown;
    string private _state;
    string private _pin;
    string private _country;
    string private _region;
    address[] private _owner;
    address[] private _previousowner;
    event OwnershipTransferred(address[] indexed previousOwner, address[] indexed newOwner);
    constructor(string memory surveyNo, string memory street, string memory area, string memory cityTown, string memory state, string memory pin, string memory country, string memory region, address[] memory owner)
    {
        _surveyNo = surveyNo;
        _street = street;
        _area = area;
        _cityTown = cityTown;
        _state = state;
        _pin = pin;
        _country = country;
        _region = region;
        _owner = owner;
    }
    function surveyNo() public view returns(string memory)
    {
        return _surveyNo;
    }
    function street() public view returns(string memory)
    {
        return _street;
    }
    function area() public view returns(string memory)
    {
        return _area;
    }
    function cityTown() public view returns(string memory)
    {
        return _cityTown;
    }
    function state() public view returns(string memory)
    {
        return _state;
    }
    function pin() public view returns(string memory)
    {
        return _pin;
    }
    function country() public view returns(string memory)
    {
        return _country;
    }
    function region() public view returns(string memory)
    {
        return _region;
    }
    function owner() public view virtual returns (address[] memory)
    {
        return _owner;
    }
    function previousowner() public view virtual returns (address[] memory)
    {
        return _previousowner;
    }
    function exist(address[] memory owners, address currentUser) public view returns (bool)
    {
        for(uint i=0; i<owners.length;i++)
        {
            if(owners[i]==currentUser)
            return true;
        }
        return false;
    }
    function transferOwnership(address[] memory newOwner) public
    {
        require(exist(_owner, _msgSender()), "Ownable: caller is not the owner");
        for(uint i=0; i<newOwner.length; i++)
        {
            require(newOwner[i] != address(0), "Ownable: new owner is the zero address");
        }
        _transferOwnership(newOwner);
    }
    function _transferOwnership(address[] memory newOwner) internal virtual
    {
        address[] memory oldOwner = _owner;
        _previousowner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

Context.sol

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}